# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Setting.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import datetime

from PyQt5.QtWidgets import QDialog, QPushButton
from PyQt5 import QtCore, QtGui, QtWidgets
import UI,os,datetime
import configparser as cfp
from openpyxl import load_workbook

class Ui_Setting(object):
    def setupUi(self, Setting):
        self.file = cfp.ConfigParser()
        self.file['setting'] = {}
        self.i = 'n'
        self.file['answers'] = {}  #初始化配置文件
        Setting.setObjectName("Setting")
        Setting.resize(400, 300)
        self.window = Setting
        self.Title = QtWidgets.QLabel(Setting)
        self.Title.setGeometry(QtCore.QRect(30, 0, 361, 41))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.Title.setFont(font)
        self.Title.setObjectName("Title")
        self.number = QtWidgets.QLabel(Setting)
        self.number.setGeometry(QtCore.QRect(40, 210, 54, 21))
        self.number.setObjectName("number")
        self.Repetitive = QtWidgets.QCheckBox(Setting)
        self.Repetitive.setGeometry(QtCore.QRect(260, 210, 71, 21))
        self.Repetitive.setObjectName("Repetitive")
        self.NumberBox = QtWidgets.QSpinBox(Setting)
        self.NumberBox.setGeometry(QtCore.QRect(100, 210, 151, 21))
        self.NumberBox.setMinimum(1)
        self.NumberBox.setMaximum(99999)
        self.NumberBox.setObjectName("NumberBox")
        self.StartButton = QtWidgets.QPushButton(Setting)
        self.StartButton.setGeometry(QtCore.QRect(0, 260, 75, 41))
        self.StartButton.setObjectName("StartButton")
        self.verticalLayoutWidget = QtWidgets.QWidget(Setting)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(40, 50, 321, 151))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.comboBox = QtWidgets.QComboBox(self.verticalLayoutWidget)
        self.comboBox.setObjectName("comboBox")
        self.comboBox_2 = QtWidgets.QComboBox(self.verticalLayoutWidget)
        self.comboBox_2.setObjectName("comboBox_2")
        files = os.listdir('.\\')
        self.xlfile = []
        for i in files:
            if '.xlsx' in i:
                self.xlfile.append(i)
        for i in self.xlfile:
            self.comboBox.addItem("")
        self.verticalLayout_2.addWidget(self.comboBox)
        self.verticalLayout_2.addWidget(self.comboBox_2)
        self.radioButton_1 = QtWidgets.QRadioButton(self.verticalLayoutWidget)
        self.radioButton_1.setObjectName("radioButton_1")
        self.verticalLayout_2.addWidget(self.radioButton_1)
        self.radioButton_2 = QtWidgets.QRadioButton(self.verticalLayoutWidget)
        self.radioButton_2.setAutoExclusive(True)
        self.radioButton_2.setObjectName("radioButton_2")
        self.verticalLayout_2.addWidget(self.radioButton_2)

        self.retranslateUi(Setting)
        QtCore.QMetaObject.connectSlotsByName(Setting)

        self.comboBox.highlighted['int'].connect(self.sheet)
        self.StartButton.clicked.connect(self.get_setting_1)
        self.StartButton.clicked.connect(self.get_setting_2)
        self.StartButton.clicked.connect(self.get_setting_3)
        self.StartButton.clicked.connect(self.check_condition)
    def sheet(self,text):
        self.Answers_book = load_workbook(self.xlfile[text])
        s_names = self.Answers_book.sheetnames
        self.comboBox_2.clear()
        for i in s_names:
            self.comboBox_2.addItem(i)
            print(f'{i}')
    def get_setting_1(self):
        if self.radioButton_1.isChecked():
            self.i = 'c'
            choose = self.radioButton_1.text()
            self.file['setting']['choose1'] = choose
            print(f'setting_1:{choose}')
        elif self.radioButton_2.isChecked():
            self.i = 'c'
            choose = self.radioButton_2.text()
            self.file['setting']['choose1'] = choose
            print(f'setting_1:{choose}')
        else:
            self.i = 'n'
        with open('save.ini', 'w') as configfile:
            self.file.write(configfile)

    def get_setting_2(self):
        if self.Repetitive.isChecked():
            choose = self.Repetitive.text()
            self.file['setting']['choose2'] = choose
        else:
            self.file['setting']['choose2'] = 'None'
        with open('save.ini', 'w') as configfile:
            self.file.write(configfile)

    def get_setting_3(self):
        # 获取NumberBox的文本内容
        self.text_num = self.NumberBox.text()
        self.file['setting']['c_sheet'] = self.comboBox_2.currentText()
        self.file['setting']['choose3'] = self.comboBox.currentText()
        self.file['setting']['num'] = self.text_num
        self.file['setting']['start_time'] = str(datetime.datetime.now())
        with open('save.ini', 'w') as configfile:
            self.file.write(configfile)
        # 打印文本内容
        print(self.text_num)

    def check_condition(self):
        self.Answers_sheet = self.Answers_book[self.comboBox_2.currentText()]
        for self.rows in self.Answers_sheet['A']:
            if self.rows.value == None:
                break
        if self.file['setting']['choose2'] == "重复题目":
            if self.i == 'c':
                self.window.close()
                UI.AnswerWindowW()
        else:
            if self.i == 'c' and int(self.text_num) <= self.rows.row - 2:
                self.window.close()
                UI.AnswerWindowW()
            elif int(self.text_num) > self.rows.row - 2:
                UI.e_textW('你的题目数量超过题库了！！!\n如果你真想这么做，请勾选“重复题目”')
            elif self.i == 'n':
                UI.e_textW('请选择至少一个选项(解析)！！！！')

    def retranslateUi(self, Setting):
        _translate = QtCore.QCoreApplication.translate
        Setting.setWindowTitle(_translate("Setting", "设置"))
        self.Title.setText(_translate("Setting", "请选择初始设置"))
        self.number.setText(_translate("Setting", "题目数量："))
        self.Repetitive.setText(_translate("Setting", "重复题目"))
        self.StartButton.setText(_translate("Setting", "开始答题"))
        a = 0
        for i in self.xlfile:
            self.comboBox.setItemText(a, _translate("Setting", i))
            a += 1
        self.Answers_book = load_workbook(self.comboBox.currentText())
        s_names = self.Answers_book.sheetnames
        self.comboBox_2.clear()
        for i in s_names:
            self.comboBox_2.addItem(i)
        self.radioButton_1.setText(_translate("Setting", "正确的题无需解析（错误的题有解析）"))
        self.radioButton_2.setText(_translate("Setting", "做题过程有解析（做一题出一题的解析）"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Setting = QtWidgets.QWidget()
    ui = Ui_Setting()
    ui.setupUi(Setting)
    Setting.show()
    sys.exit(app.exec_())
