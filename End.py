# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'End.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import openpyxl
from PyQt5 import QtCore, QtWidgets
import configparser as cfp
import datetime, os, UI
from openpyxl import load_workbook

class Ui_End(object):
    def setupUi(self, End):
        self.file = cfp.ConfigParser()
        self.file.read('save.ini')  # 读取配置文件
        self.Answers_book = load_workbook(self.file['setting']['choose3'])  #创建xw对象
        self.Answers_sheet = self.Answers_book[self.file['setting']['c_sheet']]  #获取sheet页
        End.setObjectName("End")
        End.resize(400, 300)
        self.verticalLayoutWidget = QtWidgets.QWidget(End)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 221, 201))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Questions = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.Questions.setObjectName("Questions")
        self.verticalLayout.addWidget(self.Questions)
        self.Time = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.Time.setObjectName("Time")
        self.verticalLayout.addWidget(self.Time)
        self.Tnumber = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.Tnumber.setObjectName("Tnumber")
        self.verticalLayout.addWidget(self.Tnumber)
        self.Fnumber = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.Fnumber.setObjectName("Fnumber")
        self.verticalLayout.addWidget(self.Fnumber)
        self.Anumber = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.Anumber.setObjectName("Anumber")
        self.verticalLayout.addWidget(self.Anumber)
        self.Accuracy = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.Accuracy.setObjectName("Accuracy")
        self.verticalLayout.addWidget(self.Accuracy)
        self.FButton = QtWidgets.QPushButton(End)
        self.FButton.setGeometry(QtCore.QRect(240, 80, 141, 41))
        self.FButton.setObjectName("FButton")
        self.AButton = QtWidgets.QPushButton(End)
        self.AButton.setGeometry(QtCore.QRect(240, 140, 141, 41))
        self.AButton.setObjectName("AButton")
        self.TButton = QtWidgets.QPushButton(End)
        self.TButton.setGeometry(QtCore.QRect(240, 20, 141, 41))
        self.TButton.setObjectName("TButton")
        self.EndButton = QtWidgets.QPushButton(End)
        self.EndButton.setGeometry(QtCore.QRect(310, 260, 81, 31))
        self.EndButton.setObjectName("EndButton")
        self.SButton = QtWidgets.QPushButton(End)
        self.SButton.setGeometry(QtCore.QRect(10, 210, 141, 41))
        self.SButton.setObjectName("SButton")
        self.SaveBadButton = QtWidgets.QPushButton(End)
        self.SaveBadButton.setGeometry(QtCore.QRect(10, 260, 61, 23))
        self.SaveBadButton.setObjectName("SaveBadButton")
        self.SaveRightButton = QtWidgets.QPushButton(End)
        self.SaveRightButton.setGeometry(QtCore.QRect(80, 260, 71, 23))
        self.SaveRightButton.setObjectName("SaveRightButton")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(End)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(160, 210, 121, 41))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.radioButtonText = QtWidgets.QRadioButton(self.verticalLayoutWidget_2)
        self.radioButtonText.setObjectName("radioButtonText")
        self.verticalLayout_2.addWidget(self.radioButtonText)
        self.radioButtonXlsx = QtWidgets.QRadioButton(self.verticalLayoutWidget_2)
        self.radioButtonXlsx.setObjectName("radioButtonXlsx")
        self.verticalLayout_2.addWidget(self.radioButtonXlsx)

        self.retranslateUi(End)
        QtCore.QMetaObject.connectSlotsByName(End)

        self.EndButton.clicked.connect(End.close)
        self.SButton.clicked.connect(self.save)
        self.SaveBadButton.clicked.connect(self.savebad)
        self.SaveRightButton.clicked.connect(self.saveright)
        self.FButton.clicked.connect(self.Fchoose)
        self.TButton.clicked.connect(self.Tchoose)
        self.AButton.clicked.connect(self.Achoose)


    def Fchoose(self):
        self.file['End_analysis'] = {
            'choose': '错题解析'
        }
        with open('save.ini', 'w') as configfile:
            self.file.write(configfile)
        if self.file['end_analysis']['e_question'] == '':
            UI.e_textW('不好意思，你没有做错的题，点这个没用')
        else:
            UI.q_analysisW()
    def Tchoose(self):
        self.file['End_analysis'] = {
            'choose': '对题解析'
        }
        with open('save.ini', 'w') as configfile:
            self.file.write(configfile)
        if self.file['end_analysis']['t_question'] == '':
            UI.e_textW('不好意思，你没有做对的题，点这个没用')
        else:
            UI.q_analysisW()

    def Achoose(self):
        self.file['End_analysis'] = {
            'choose':'所有解析'
        }
        with open('save.ini', 'w') as configfile:
            self.file.write(configfile)
        UI.q_analysisW()
    def save(self):
        if (self.radioButtonXlsx.isChecked() == False) and (self.radioButtonText.isChecked() == False):
            UI.e_textW('请选择保存类型')
            return
        if self.file['end_analysis']['e_question'] == '':
            a_list = self.file['end_analysis']['t_question'].split(',')
            c_list = self.file['end_analysis']['t_choose'].split('<~!~>')
        elif self.file['end_analysis']['t_question'] == '':
            a_list = self.file['end_analysis']['e_question'].split(',')
            c_list = self.file['end_analysis']['e_choose'].split('<~!~>')
        else:
            a_list = self.file['end_analysis']['e_question'].split(',') \
                          + self.file['end_analysis']['t_question'].split(',')
            c_list = self.file['end_analysis']['e_choose'].split('<~!~>') \
                          + self.file['end_analysis']['t_choose'].split('<~!~>')
        '''print(f"选择题库：选择题库：{self.file['setting']['choose3']}"
              f"页:{self.file['setting']['c_sheet']}\n"
              f"完成时间：\n"
              f"正确题目数量：{self.file['answers']['right']}\n"
              f"错误题目数量：{self.file['answers']['bad']}\n"
              f"总题目数量：{self.file['setting']['num']}\n"
              f"正确率：{self.rightlv}%")'''
        t = datetime.datetime.now()
        name = f'{t.year}年{t.month}月{t.day}日{t.hour}时{t.minute}分{t.second}秒所有题'
        if self.radioButtonText.isChecked():
            file = open(f'{name}.txt', 'a', encoding="utf-8")
            file.write(f"选择题库：{self.file['setting']['choose3']}\n"
                       f"页:{self.file['setting']['c_sheet']}\n"
                       f"完成时间：\
            {datetime.datetime.now() - datetime.datetime.strptime(self.file['setting']['start_time'], '%Y-%m-%d %H:%M:%S.%f')}\n"
                       f"正确题目数量：{self.file['answers']['right']}\n"
                       f"错误题目数量：{self.file['answers']['bad']}\n"
                       f"总题目数量：{self.file['setting']['num']}\n"
                       f"正确率：{self.rightlv}%\n\n")
            e = 0
            for i in a_list:
                a = self.Answers_sheet[f'C{a_list[e]}:F{a_list[e]}']
                b = a[0]
                c = 0
                d = []
                for i in b:
                    d.append(b[c].value)
                    c += 1
                file.write(f"题目：{self.Answers_sheet[f'B{a_list[e]}'].value}\n" \
                           f"正确选项：{d[0]}\n错误选项：{d[1], d[2], d[3]}\n你的选择：{c_list[e]}\n" \
                           f"解析：{self.Answers_sheet[f'A{a_list[e]}'].value}\n\n")
                e += 1
        if self.radioButtonXlsx.isChecked():
            Answers_book = openpyxl.Workbook()
            Answers_sheet = Answers_book.active
            top = ['Analysis','Question','Tanswer','Eanswer','Eanswer','Eanswer']
            Answers_sheet.append(top)
            e = 1
            d = []
            for i in a_list:
                print(i)
                for g in self.Answers_sheet[i]:
                    print(g)
                    d.append(g.value)
                Answers_sheet.append(d)
                d = []
            Answers_book.save(f'{name}.xlsx')



    def savebad(self):
        if (self.radioButtonXlsx.isChecked() == False) and (self.radioButtonText.isChecked() == False):
            UI.e_textW('请选择保存类型')
            return
        if self.file['end_analysis']['e_question'] == '':
                UI.e_textW('你没有错题')
                return
        a_list = self.file['end_analysis']['e_question'].split(',')
        c_list = self.file['end_analysis']['e_choose'].split('<~!~>')
        print(f"选择题库：选择题库：{self.file['setting']['choose3']}"
                  f"页:{self.file['setting']['c_sheet']}\n"
                  f"完成时间：\n"
                  f"正确题目数量：{self.file['answers']['right']}\n"
                  f"错误题目数量：{self.file['answers']['bad']}\n"
                  f"总题目数量：{self.file['setting']['num']}\n"
                  f"正确率：{self.rightlv}%")
        t = datetime.datetime.now()
        name = f'{t.year}年{t.month}月{t.day}日{t.hour}时{t.minute}分{t.second}秒分错题'
        if self.radioButtonText.isChecked():
            file = open(f'{name}.txt', 'a', encoding="utf-8")
            file.write(f"选择题库：{self.file['setting']['choose3']}\n"
                       f"页:{self.file['setting']['c_sheet']}\n"
                       f"完成时间：\
            {datetime.datetime.now() - datetime.datetime.strptime(self.file['setting']['start_time'], '%Y-%m-%d %H:%M:%S.%f')}\n"
                       f"正确题目数量：{self.file['answers']['right']}\n"
                       f"错误题目数量：{self.file['answers']['bad']}\n"
                       f"总题目数量：{self.file['setting']['num']}\n"
                       f"正确率：{self.rightlv}%\n\n")
            e = 0
            for i in a_list:
                a = self.Answers_sheet[f'C{a_list[e]}:F{a_list[e]}']
                b = a[0]
                c = 0
                d = []
                for i in b:
                    d.append(b[c].value)
                    c += 1
                file.write(f"题目：{self.Answers_sheet[f'B{a_list[e]}'].value}\n" \
                           f"正确选项：{d[0]}\n错误选项：{d[1], d[2], d[3]}\n你的选择：{c_list[e]}\n" \
                           f"解析：{self.Answers_sheet[f'A{a_list[e]}'].value}\n\n")
                e += 1
        if self.radioButtonXlsx.isChecked():
            Answers_book = openpyxl.Workbook()
            Answers_sheet = Answers_book.active
            top = ['Analysis','Question','Tanswer','Eanswer','Eanswer','Eanswer']
            Answers_sheet.append(top)
            e = 1
            d = []
            for i in a_list:
                print(i)
                for g in self.Answers_sheet[i]:
                    print(g)
                    d.append(g.value)
                Answers_sheet.append(d)
                d = []
            Answers_book.save(f'{name}.xlsx')

    def saveright(self):
        if (self.radioButtonXlsx.isChecked() == False) and (self.radioButtonText.isChecked() == False):
            UI.e_textW('请选择保存类型')
            return
        if self.file['end_analysis']['t_question'] == '':
            UI.e_textW('你没有对题')
            return
        a_list = self.file['end_analysis']['t_question'].split(',')
        c_list = self.file['end_analysis']['t_choose'].split('<~!~>')
        print(f"选择题库：选择题库：{self.file['setting']['choose3']}"
                  f"页:{self.file['setting']['c_sheet']}\n"
                  f"完成时间：\n"
                  f"正确题目数量：{self.file['answers']['right']}\n"
                  f"错误题目数量：{self.file['answers']['bad']}\n"
                  f"总题目数量：{self.file['setting']['num']}\n"
                  f"正确率：{self.rightlv}%")
        t = datetime.datetime.now()
        name = f'{t.year}年{t.month}月{t.day}日{t.hour}时{t.minute}分{t.second}秒分对题'
        if self.radioButtonText.isChecked():
            file = open(f'{name}.txt', 'a', encoding="utf-8")
            file.write(f"选择题库：{self.file['setting']['choose3']}\n"
                       f"页:{self.file['setting']['c_sheet']}\n"
                       f"完成时间：\
            {datetime.datetime.now() - datetime.datetime.strptime(self.file['setting']['start_time'], '%Y-%m-%d %H:%M:%S.%f')}\n"
                       f"正确题目数量：{self.file['answers']['right']}\n"
                       f"错误题目数量：{self.file['answers']['bad']}\n"
                       f"总题目数量：{self.file['setting']['num']}\n"
                       f"正确率：{self.rightlv}%\n\n")
            e = 0
            for i in a_list:
                a = self.Answers_sheet[f'C{a_list[e]}:F{a_list[e]}']
                b = a[0]
                c = 0
                d = []
                for i in b:
                    d.append(b[c].value)
                    c += 1
                file.write(f"题目：{self.Answers_sheet[f'B{a_list[e]}'].value}\n" \
                           f"正确选项：{d[0]}\n错误选项：{d[1], d[2], d[3]}\n你的选择：{c_list[e]}\n" \
                           f"解析：{self.Answers_sheet[f'A{a_list[e]}'].value}\n\n")
                e += 1
        if self.radioButtonXlsx.isChecked():
            Answers_book = openpyxl.Workbook()
            Answers_sheet = Answers_book.active
            top = ['Analysis','Question','Tanswer','Eanswer','Eanswer','Eanswer']
            Answers_sheet.append(top)
            e = 1
            d = []
            for i in a_list:
                print(i)
                for g in self.Answers_sheet[i]:
                    print(g)
                    d.append(g.value)
                Answers_sheet.append(d)
                d = []
            Answers_book.save(f'{name}.xlsx')

    def retranslateUi(self, End):
        _translate = QtCore.QCoreApplication.translate
        End.setWindowTitle(_translate("End", "结算"))
        self.Questions.setWordWrap(True)
        self.Questions.setText(_translate("End", f"选择题库：{self.file['setting']['choose3']}"
                                                 f"(分类:{self.file['setting']['c_sheet']})"))
        self.Time.setText(_translate("End", f"完成时间：\
{datetime.datetime.now() - datetime.datetime.strptime(self.file['setting']['start_time'], '%Y-%m-%d %H:%M:%S.%f')}"))
        self.Tnumber.setText(_translate("End", f"正确题目数量：{self.file['answers']['right']}"))
        self.Fnumber.setText(_translate("End", f"错误题目数量：{self.file['answers']['bad']}"))
        self.Anumber.setText(_translate("End", f"总题目数量：{self.file['setting']['num']}"))
        self.rightlv = 100 * (int(self.file['answers']['right']) / int(self.file['setting']['num']))
        self.Accuracy.setText(_translate("End", f"正确率：{self.rightlv}%"))
        self.FButton.setText(_translate("End", "查看所有错题解析"))
        self.AButton.setText(_translate("End", "查看所有解析"))
        self.TButton.setText(_translate("End", "查看所有对题解析"))
        self.EndButton.setText(_translate("End", "结束"))
        self.SButton.setText(_translate("End", "保存所有数据"))
        self.SaveBadButton.setText(_translate("End", "保存错题"))
        self.SaveRightButton.setText(_translate("End", "保存对题"))
        self.radioButtonText.setText(_translate("End", "保存为txt文件"))
        self.radioButtonXlsx.setText(_translate("End", "保存为xlsx文件"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    End = QtWidgets.QWidget()
    ui = Ui_End()
    ui.setupUi(End)
    End.show()
    sys.exit(app.exec_())